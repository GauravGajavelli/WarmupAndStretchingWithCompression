@startuml

enum FileIgnoreReasons {
  GENERIC
  TOO_LARGE
}
enum TestStatus {
  SUCCESSFUL
  FAILED
  ABORTED
  DISABLED
}

class LoggingExtension {
- logger : LoggingSingleton
- loggerInitialized : boolean {static}
- tempDirectory : Path {static}

~ testRunInfoFilename : String {static}
~ startTestRunInfoFilename : String {static}
~ errorLogFilename : String {static}
~ finalTarFilename : String {static}
~ diffsPrefix : String {static}
~ tarSuffix : String {static}
~ tarZipSuffix : String {static}

~ sourceFolderName : String {static}
~ testSupportPackageName : String {static}
~ diffsFolderName : String {static}
~ patchesFolderName : String {static}
~ tempFolderName : String {static}

- MB_SIZE : long
- KB_SIZE : long
- SYNC_MAX_TIME : long
- ASYNC_MAX_TIME : long
- WAY_TOO_LONG_FACTOR : long
- REBASELINE_SIZE : long
- MAX_TAR_SIZE : long
- MAX_REPO_SIZE : long
- MAX_DIFFED_FILE_SIZE : long

  + beforeAll(ctx: ExtensionContext) : void
  + beforeEach(ctx: ExtensionContext) : void
  + testAborted(ctx: ExtensionContext, cause : Throwable) : void
  + testDisabled(ctx: ExtensionContext) : void
  + testFailed(ctx: ExtensionContext, cause : Throwable) : void
  + testSuccessful(ctx: ExtensionContext) : void
  + close() : void

  - initDirectories() : void
  - initTempDirectory() : void
  - untarLogs(targetPath : Path, tarPath : Path) : void

  - tarTooBig() : boolean
  - getRepoFilesSize(): long

  - setUpAndCheckTiming(time: long): void
  - accumulateAndCheckTiming(time : long) : void
  - checkTiming(time : long) : void

  - unzipAndUntarDiffs() : void
  - writeDiffs(testRunNumber : int, seed : int, redactDiffs : boolean) : void
  - tarAndZipDiffs() : void
  - saveTestRunInfo(objectMapper : ObjectMapper,testRunInfo : JsonNode) : void
  - atomicallySaveTempFiles() : void

  - generateMessage(throwable : Throwable) : String
  - logError(throwable : Throwable) : void
}

class LoggingSingleton {
  - {static} startTimestamp : String
  - {static} objectMapper : ObjectMapper
  - {static} testRunInfo : JsonNode
  - {static} testFileName : String
  - {static} testFilePackageName : String
  - {static} loggedInitialError : boolean
  - {static} fileSizes : long
  - {static} startTime : Long
  - {static} accumulatedTime : long

  - {static} prevRunNumber : String // JSON keys for getters/setters
  - {static} randomSeed : String
  - {static} redactDiffs : String
  - {static} rebaselining : String
  - {static} toIgnore : String
  - {static} skipLogging : String
  - {static} strikes : String
  - {static} prevBaselineRunNumber : String
  - {static} runTimes : String

  - {static} TIME_CHECK_WINDOW_SIZE : int
  - {static} MAX_STRIKES : int
  - {static} instance : LoggingSingleton

  - LoggingSingleton()

  ~ {static} getInstance() : LoggingSingleton
}

' ===== FilenameComparator =====
class FilenameComparator {
  + compare(a: String, b : String) : int
  + findFirstNumberRegex(text : String) : Integer
}
interface Comparator

interface TestWatcher
interface BeforeAllCallback
interface BeforeEachCallback

LoggingExtension .u.|> TestWatcher
LoggingExtension .u.|> BeforeAllCallback
LoggingExtension .u.|> BeforeEachCallback
LoggingExtension --> "1" LoggingSingleton
LoggingExtension ..> TestStatus

FilenameComparator .u.|> Comparator

LoggingSingleton --> "1" LoggingSingleton
LoggingSingleton ..> TestStatus
LoggingSingleton ..> FilenameComparator
LoggingSingleton ..> FileIgnoreReasons

@enduml