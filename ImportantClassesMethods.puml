@startuml

enum FileIgnoreReasons {
  GENERIC
  TOO_LARGE
}
enum TestStatus {
  SUCCESSFUL
  FAILED
  ABORTED
  DISABLED
}

class LoggingExtension {
  - logger : LoggingSingleton
  - loggerInitialized : boolean
  - MB_SIZE : long
  - KB_SIZE : long
  - OPEN_MAX_TIME : long
  - CLOSE_MAX_TIME : long
  - WAY_TOO_LONG_FACTOR : long

  + beforeAll(ExtensionContext ctx) : void
  + beforeEach(ExtensionContext arg0) : void
  + testAborted(ExtensionContext ctx, Throwable cause) : void
  + testDisabled(ExtensionContext ctx) : void
  + testFailed(ExtensionContext ctx, Throwable cause) : void
  + testSuccessful(ExtensionContext ctx) : void
  + close() : void

  - initLogger() : void

  - tarTooBig() : boolean
  - getRepoFilesSize(): long

  - setUpAndCheckTiming(time: long): void
  - accumulateAndCheckTiming(time : long) : void
  - checkTiming(time : long) : void

  - unzipAndUntarDiffs() : void
  - writeDiffs(testRunNumber : int, seed : int, encryptDiffs : boolean) : void
  - tarAndZipDiffs() : void
  - saveTestRunInfo(objectMapper : ObjectMapper,testRunInfo : JsonNode) : void
}

class LoggingSingleton {
  + {static} tempDirectory : Path
  - {static} timestamp : String
  - {static} objectMapper : ObjectMapper
  - {static} testRunInfo : JsonNode
  - {static} testFileName : String
  - {static} testFilePackageName : String
  - {static} loggedInitialError : boolean
  - {static} fileSizes : long
  - {static} startTime : Long
  - {static} accumulatedTime : long
  ~ {static} testRunInfoFilename : String
  ~ {static} startTestRunInfoFilename : String
  ~ {static} errorLogFilename : String
  ~ {static} finalTarFilename : String
  ~ {static} diffsPrefix : String
  ~ {static} tarSuffix : String
  ~ {static} tarZipSuffix : String
  - {static} TIME_CHECK_WINDOW_SIZE : int
  - {static} MAX_STRIKES : int
  - {static} instance : LoggingSingleton

  - LoggingSingleton()

  + {static} getInstance() : LoggingSingleton

  + {static} untarFile(Path targetPath, Path tarPath) : void
  + {static} atomicallySaveTempFiles() : void

  - {static} generateMessage(throwable : Throwable) : String
  + {static} logError(throwable : Throwable) : void
}

' ===== FilenameComparator =====
class FilenameComparator {
  + compare(String a, String b) : int
  + findFirstNumberRegex(String text) : Integer
}
interface Comparator

interface TestWatcher
interface BeforeAllCallback
interface BeforeEachCallback

LoggingExtension .u.|> TestWatcher
LoggingExtension .u.|> BeforeAllCallback
LoggingExtension .u.|> BeforeEachCallback
LoggingExtension --> "1" LoggingSingleton
LoggingExtension ..> TestStatus

FilenameComparator .u.|> Comparator

LoggingSingleton --> "1" LoggingSingleton
LoggingSingleton ..> TestStatus
LoggingSingleton ..> FilenameComparator
LoggingSingleton ..> FileIgnoreReasons

@enduml